# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# default_platform(:ios)

# platform :ios do

#   desc "Submit a new Beta build to Apple TestFlight"
#   lane :beta do
#     increment_build_number({
#       build_number: latest_testflight_build_number(version: get_version_number(target: "Rainbow")) + 1
#     })

#     update_info_plist(
#       plist_path: "Rainbow/Info.plist",
#       display_name: "Rainbow"
#     )
#     update_app_identifier(
#       app_identifier: "com.cardstack.cardpayapp",
#       xcodeproj: "Rainbow.xcodeproj",
#       plist_path: "Rainbow/Info.plist",
#     )
#     match(
#       force: true,
#       type: "appstore",
#       app_identifier: "com.cardstack.cardpayapp",
#       git_url: "git@github.com:rainbow-me/rainbow-code-signing.git"
#     )
#     automatic_code_signing(
#       use_automatic_signing: false
#     )
#     gym(
#       workspace: "Rainbow.xcworkspace",
#       scheme: "Rainbow",
#       include_symbols: true,
#       configuration: "Release",
#       export_method: "app-store",
#     )

#     # api_key = app_store_connect_api_key(
#     #   key_id: "B6RRSJG6H6",
#     #   issuer_id: "95830311-9e99-47b0-95ac-d628a3e4215e",
#     #   key_filepath: "fastlane/AuthKey_B6RRSJG6H6.p8",
#     #   duration: 1200, # optional
#     #   in_house: false, # optional but may be required if using match/sigh
#     # )

#     pilot(
#       app_identifier: "com.cardstack.cardpayapp",
#       skip_waiting_for_build_processing: true,
#       # api_key: api_key
#     )
#   end
# end

default_platform(:ios)

platform :ios do
  before_all do
    decrypt_fastlane_vars
  end
  
  ########################################################################
  # Alpha Lane
  ########################################################################
  desc "Alpha build"
  lane :alpha do |options|

    decrypt_app_vars(
      namespace: 'alpha'
    )

    ########################
    # Pull certs & profiles
    ########################
    sync_code_signing(type: "adhoc")

    ########################
    # Build the app
    ########################
    increment_build_number(build_number: options[:build_number])

    # Make sure and set either GYM_WORKSPACE or GYM_PROJECT and GYM_SCHEME
    build_ios_app(
      export_method: "app-store",
      include_bitcode: true
    )
  end

  ########################################################################
  # Beta Lane
  ########################################################################
  desc "Beta build"
  lane :beta do |options|

    decrypt_app_vars(
      namespace: 'beta'
    )

    ########################
    # Pull certs & profiles
    ########################
    sync_code_signing(type: "appstore")

    ########################
    # Build the app
    ########################
    increment_build_number(build_number: options[:build_number])

    # Make sure and set either GYM_WORKSPACE or GYM_PROJECT and GYM_SCHEME
    build_ios_app(
      export_method: "app-store",
      include_bitcode: true
    )

    ########################
    # Upload to TestFlight
    ########################
    upload_to_testflight
  end

  desc "Production build"
  lane :production do |options|
    
    decrypt_app_vars(
      namespace: 'production'
    )
    
    ########################
    # Pull certs & profiles
    ########################
    sync_code_signing(type: "appstore")

    ########################
    # Build the app
    ########################
    increment_build_number(build_number: options[:build_number])

    # Make sure and set either GYM_WORKSPACE or GYM_PROJECT and GYM_SCHEME
    build_ios_app(
      export_method: "app-store",
      include_bitcode: true
    )

    ########################
    # Upload to AppStore Connect
    ########################
    upload_to_app_store(
      force: true,
      submit_for_review: false,
      automatic_release: false
    )
  end

  error do |lane, exception|
    if ENV['SLACK_URL']
      # slack(
      #   message: exception.message,
      #   success: false
      # )
    end
  end
end